import requests
from pathlib import Path
import datetime
import re
from typing import List, Dict, Any

class SpellChecker:
    def __init__(self, config: Dict[str, Any] = None):
        self.config = {
            'api_url': "https://speller.yandex.net/services/spellservice.json/checkText",
            'max_retries': 3,
            'suggestions_limit': 5,
            'context_window': 50,
            'log_format': 'markdown',
            ** (config or {})
        }

    def check_spelling(self, text: str, lang: str = 'ru') -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏"""
        for attempt in range(self.config['max_retries']):
            try:
                response = requests.get(
                    self.config['api_url'],
                    params={'text': text, 'lang': lang},
                    timeout=5
                )
                if response.status_code == 200:
                    return response.json()
                return []
            except requests.exceptions.RequestException as e:
                if attempt == self.config['max_retries'] - 1:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                    return []

    def apply_correction(self, text: str, error: Dict, correction: str) -> str:
        """–£–º–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        start = error['pos']
        end = start + error['len']
        original = text[start:end]
        
        if original != original.lower():
            if original.istitle():
                correction = correction.title()
            elif original.isupper():
                correction = correction.upper()
            elif '-' in original:  
                parts = correction.split('-')
                correction = '-'.join([p.capitalize() for p in parts])
        
        return text[:start] + correction + text[end:]

    def process_block(self, block: str, block_num: int, log_path: Path) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        corrected = block
        while True:
            errors = self.check_spelling(corrected)
            if not errors:
                break  

            changes_made = False

            for error in sorted(errors, key=lambda x: -x['pos']):
                error_text = corrected[error['pos']:error['pos']+error['len']]
                suggestions = error.get('s', [])[:self.config['suggestions_limit']]

                print(f"\n{'‚ïê'*50}")
                print(f"üîç –ë–ª–æ–∫ #{block_num}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_text}")
                self._print_context(corrected, error['pos'], error['len'])
                
                choice = self._get_user_choice(suggestions)
                if choice == 'skip':
                    continue

                correction = self._handle_choice(choice, suggestions)
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                corrected = self.apply_correction(corrected, error, correction)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                self.log_correction(
                    log_path,
                    block_num,
                    error_text,
                    suggestions,
                    correction,
                    choice
                )
                
                changes_made = True


            if not changes_made:
                break

        return corrected


    def _print_context(self, text: str, pos: int, length: int):
        """–ü–µ—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"""
        start = max(0, pos - self.config['context_window'])
        end = min(len(text), pos + length + self.config['context_window'])
        context = text[start:end]
        context = context.replace('\n', ' ')
        error_part = text[pos:pos+length]
        
        highlighted = re.sub(
            re.escape(error_part), 
            f'\033[91m{error_part}\033[0m', 
            context, 
            count=1
        )
        print(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{highlighted}...")

    def _get_user_choice(self, suggestions: List[str]) -> str:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for i, s in enumerate(suggestions, 1):
            print(f"  {i}. {s}")
        print("  s - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        print("  m - –†—É—á–Ω–æ–π –≤–≤–æ–¥")
        print("  q - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip().lower()
            if choice in {'s', 'm', 'q'}:
                return choice
            if choice.isdigit() and 1 <= int(choice) <= len(suggestions):
                return choice
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def _handle_choice(self, choice: str, suggestions: List[str]) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == 'm':
            return input("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ").strip()
        if choice == 'q':
            raise KeyboardInterrupt
        if choice.isdigit():
            return suggestions[int(choice)-1]
        return ''

    def log_correction(self, log_path: Path, block_num: int, 
                      error: str, suggestions: List[str], 
                      correction: str, action: str):
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        timestamp = datetime.datetime.now().isoformat()
        with log_path.open('a', encoding='utf-8') as f:
            if self.config['log_format'] == 'markdown':
                f.write(
                    f"\n### –ë–ª–æ–∫ {block_num} ({timestamp})\n"
                    f"**–û—à–∏–±–∫–∞:** `{error}`\n\n"
                    f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n" + 
                    '\n'.join(f"- {s}" for s in suggestions) + '\n\n' +
                    f"**–î–µ–π—Å—Ç–≤–∏–µ:** {action} ‚Üí `{correction}`\n"
                )
            else:  
                f.write(
                    f"\n[{timestamp}] –ë–ª–æ–∫ {block_num}\n"
                    f"–û—à–∏–±–∫–∞: {error}\n"
                    f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(suggestions)}\n"
                    f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {correction} ({action})\n"
                )

def interactive_spellcheck(file_path: str, mode: str = 'paragraph'):
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    path = Path(file_path)
    checker = SpellChecker()
    
    try:
        content = path.read_text(encoding='utf-8')
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    log_path = path.with_name(f"spellcheck_log_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md")
    output_path = path.with_name(f"corrected_{path.name}")
    
    blocks = re.split(r'\n{2,}', content) if mode == 'paragraph' else content.split('\n')
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    total_blocks = len(blocks)
    print(f"üìÇ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_blocks}")
    
    try:
        with output_path.open('w', encoding='utf-8') as output_file:
            for i, block in enumerate(blocks, 1):
                if not block.strip():
                    output_file.write(block + ('\n\n' if mode == 'paragraph' else '\n'))
                    continue
                
                processed = checker.process_block(block, i, log_path)
                output_file.write(processed + ('\n\n' if mode == 'paragraph' else '\n'))
                
                print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: {i}/{total_blocks} ({i/total_blocks:.1%})")
                print(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {datetime.datetime.now().strftime('%H:%M:%S')}")
                
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    
    print(f"\nüîß –õ–æ–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {log_path}")
    print(f"‚ú® –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {output_path}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏')
    parser.add_argument('file', help='–ü—É—Ç—å –∫ .md —Ñ–∞–π–ª—É')
    parser.add_argument('--mode', choices=['paragraph', 'line'], default='paragraph',
                       help='–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –ø–æ –∞–±–∑–∞—Ü–∞–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞–º')
    args = parser.parse_args()

    interactive_spellcheck(args.file, args.mode)
    
# python script_spell_checking.py "example.md" --mode paragraph
